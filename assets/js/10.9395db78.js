(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{209:function(t,s,a){"use strict";a.r(s);var l=a(28),v=Object(l.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"linux-进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux-进程"}},[t._v("#")]),t._v(" Linux 进程")]),t._v(" "),a("h2",{attrs:{id:"进程分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程分类"}},[t._v("#")]),t._v(" 进程分类")]),t._v(" "),a("p",[t._v("ping")]),t._v(" "),a("ul",[a("li",[t._v("进程分为普通进程和守护进程")])]),t._v(" "),a("h2",{attrs:{id:"守护进程管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#守护进程管理"}},[t._v("#")]),t._v(" 守护进程管理")]),t._v(" "),a("ul",[a("li",[t._v("服务管理命令：systemctl")]),t._v(" "),a("li",[t._v("退出服务管理命令：q")]),t._v(" "),a("li",[t._v("关闭进程：systemctl stop 服务名称")]),t._v(" "),a("li",[t._v("重启进程：systemctl restart 服务名称")]),t._v(" "),a("li",[t._v("启动进程：systemctl start 服务名称（systemctl start nginx）")]),t._v(" "),a("li",[t._v("查看进程状态：systemctl status 服务名称")]),t._v(" "),a("li",[t._v("nginx 个性化的子命令：systemctl reload nginx --- 不重启的情况下 更新配置文件")])]),t._v(" "),a("h2",{attrs:{id:"杀死普通进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#杀死普通进程"}},[t._v("#")]),t._v(" 杀死普通进程")]),t._v(" "),a("ul",[a("li",[t._v("kill PID：danger 慎用，会丢失数据。")])]),t._v(" "),a("h2",{attrs:{id:"进程管理相关命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程管理相关命令"}},[t._v("#")]),t._v(" 进程管理相关命令")]),t._v(" "),a("ul",[a("li",[t._v("程序是静态的，运行起来就是进程，进程是动态的。进程管理就是用来管理程序运行的状态。")]),t._v(" "),a("li",[t._v("ps aux 查看进程。是一瞬间的进程状态。")]),t._v(" "),a("li",[t._v("进程的权限就是启动用户 user 的权限。")]),t._v(" "),a("li",[t._v("Linux 启动之后，会首先运行系统内核程序，系统内核程序是所有进程的父进程（包含守护进程的父进程），在终端里\n运行程序，该终端就是程序的父进程。外部命令 pstree 可以查看进程树。")]),t._v(" "),a("li",[t._v("top 查看动态的进程状态。是程序实时的占用 cpu 和内存 的资源情况。退出 top 查看是 q。")]),t._v(" "),a("li",[t._v("w/who 查看系统中有哪些使用者。")])])])}),[],!1,null,null,null);s.default=v.exports}}]);